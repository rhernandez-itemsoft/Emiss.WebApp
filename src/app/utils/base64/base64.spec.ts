
import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { TestBed } from '@angular/core/testing';

import { Base64 } from './base64';

describe('CallBackService', () => {
    const textDecodedMock = 'Test';
    const textEncodedMock = 'VGVzdA==';
    const bytesToBlobMock = [new Uint8Array([84, 101, 115, 116])];
    const bytesToArrayBufferMock = new Uint8Array([84, 101, 115, 116]);


    const csvDataMock = 'InVzZXJJZCIsInVzZXJOYW1lIiwid29ya0VtYWlsIiwidXNlckRldGFpbF9maXJzdE5hbWUiLCJ1c2VyRGV0YWlsX2xhc3ROYW1lIiwidXNlckRldGFpbF9tTGFzdE5hbWUiLCJlbmFibGVkIiwiZ3JvdXBfbmFtZSINCiJTSSINCiJTSSINCiJTSSINCiJTSSINCiJTSSINCg==';
    const xlsDataMock = '';
    const pdfDataMock = '' +
        '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Y1SjW4TLK8Csk8xWfr5tgFyFL3xtFuIyVvexSBIMs4Fd8V4nyT3hZJD/BhXb0PQA8KXxrSHzHGIVBz7eMFAuAI700T0EyiOyxQ9LrFzYujhS8PmrjmpjHLQmRf6K88CaNTPl5BrA8nt7wsmS6QHgbUaNwETxpWELsBPCg37Z8M6KAwxDBGSuZxJc+t1BPvMZj5dIDo4RrByd8lH+9jyXtwrIemh6t8GtIiKZ3j90FgsJkk4E7iTP40EWmEPtRYlK7CyRk21q5gY0t2FECSalZ510gmQ9CcOwMlvU3hvImNH50s4U2NNe0GWIfzBJ8AIDL1xlih/4y0GcaCaTXGxZqaSsg5Atn3EiXD1FL8PaEJcS2cVRy8QhDMaY3dJvmnQ26TLXJ1L1tiJApxE5Nak+0IPElW9yfpBB6Qo/JLqzWFp8sSpTfElwgZnHvcN6Cxo88GEqLNT4ngctKbTKlnG8Z4UHf6QJJ7orwTVeCfmIb6X89RMj10VUqkaQJvPRSXsinIpp8+ibFW7+HQxV7MHhSCOar6OV9Fd6tmLeM0umcQ6YQO0nEEvJaE1zEZGvgMNfXiKlEklYlvPwkGepCOkbGqGS8tP3TYtUmU6cC/FDJssv1dlDDHVtiutFr63UAC/aEluinVomwellWfzZN4mNd1lyzbCfvLtBB30UmgZFNK3nEyzYJ8oxVR7tAopYQ5SOsx257eCC+To+6eQnU7gePJsJ9nAVMLHC6QBJi5z+W1cC5sZJtEuQZq1QimdbCy0+ivHDkzZjyES9t/9ToWtwGPHk7gw9doIO+a5fr/Q41/J3w5XICElWrWcl5vpDTEvuJWvwZhirPL/MjmOWC8mneY6U2GeQC3Sk3KeCSt+cjFYz38fbw6jEv22jkSItJJfqpRVoQUkqzvWVkfJoVDUMTW1oXQbaDvp+vSUCy2G3ptiF24KiqD9Iws59a5Kwm+PtsaiQBI9+vDtuqURh5q9nNApHpoF8lK8X6PwR2EGfi2gurmXMDtUQ/tShrB8s6ls0F6sOYI80F0zOdvAFgVqZzlyMZDdaoOfULgm0Adky/yGSoVKKfWoQl/M83knLgwJIO81SWfL7oXlCLAbpA58m7i1Kmg/6lRQT7SpnAZOnrHITq9PSiN1KJfmoRlpCCn7KexWgsWHB1Ajii0ZqNGqGm7QuZGeJLFSjMv9o2trGN/xT+DbQBJpEKZW5kc3RyZWFtCmVuZG9iagp4cmVmCjAgOQowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDEwNTUgMDAwMDAgbiAKMDAwMDAwMTM1MCAwMDAwMCBuIAowMDAwMDAxMTAwIDAwMDAwIG4gCjAwMDAwMDA5MDAgMDAwMDAgbiAKMDAwMDAwMDAxNSAwMDAwMCBuIAowMDAwMDAxMjYyIDAwMDAwIG4gCjAwMDAwMDE0MDEgMDAwMDAgbiAKMDAwMDAwNzA3NyAwMDAwMCBuIAp0cmFpbGVyCjw8L0lEIFs8NWQ5Yjg3NGJiOGRiYTEwNDdkZjhlYTFmZWVjMmE1MTA+PDVkOWI4NzRiYjhkYmExMDQ3ZGY4ZWExZmVlYzJhNTEwPl0vSW5mbyAzIDAgUi9Sb290IDEgMCBSL1NpemUgOT4+CiVpVGV4dC1Db3JlLTcuMi4xCnN0YXJ0eHJlZgoxMDE5MwolJUVPRgo=';

    let thisObj = new Base64();

    beforeEach(async () => {
        await TestBed
            .configureTestingModule({
                // teardown: { destroyAfterEach: false },
                imports: [
                ],

                schemas: [CUSTOM_ELEMENTS_SCHEMA],
            })
            .compileComponents();
        thisObj = new Base64();
    });

    it('DecodeUnicode', () => {
        expect(thisObj.DecodeUnicode(textEncodedMock)).toEqual(textDecodedMock);
    });

    it('Base64toBlob', () => {
        expect(thisObj.Base64toBlob(textEncodedMock)).toEqual(bytesToBlobMock);
    });

    it('base64ToArrayBuffer', () => {
        expect(thisObj.base64ToArrayBuffer(textEncodedMock)).toEqual(bytesToArrayBufferMock);
    });

    it('toFile CSV', () => {
        const fileName = 'test';
        const fileType = 'csv';
        // let b64 = new Base64();
        // let properties: any = { type: 'text/csv;charset=utf-8;' };
        // let _byteArray: any[] = [b64.DecodeUnicode(csvDataMock)];
        // let dataBlob: Blob = new Blob(_byteArray, properties);


        spyOn(Base64, 'toFile').withArgs(csvDataMock, 'csv', 'test').and.callThrough();
        // let link: HTMLAnchorElement = document.createElement('a');
        // spyOn(link, 'click');
        // const url = window.URL.createObjectURL(dataBlob);
        // link.href = url;
        // link.setAttribute('download', fileName + '.' + fileType);
        // document.body.appendChild(link);
        // link.click();
        // expect(link.href).toEqual(url);
        // expect(link.download).toEqual(fileName + '.' + fileType);
        // expect(link.click).toHaveBeenCalled();
        // document.body.removeChild(link);
        // expect(document.body.getElementsByTagName('a')[1]).not.toBeDefined(fileName + '.' + fileType);
        Base64.toFile(csvDataMock, 'csv', 'test');
        expect(document.body.getElementsByTagName('a')[1]).not.toBeDefined(fileName + '.' + fileType);
    });

    it('toFile XLS', () => {
        const fileName = 'test';
        const fileType = 'xls';
        // let b64 = new Base64();
        // let properties: any = { type: 'application/vnd.ms-excel;base64, bindata' };
        // let _byteArray: any[] = b64.Base64toBlob(xlsDataMock);
        // let dataBlob: Blob = new Blob(_byteArray, properties);


        spyOn(Base64, 'toFile').withArgs(xlsDataMock, 'xls', 'test').and.callThrough();


        // let link: HTMLAnchorElement = document.createElement('a');
        // spyOn(link, 'click').and.callThrough();

        // const url = window.URL.createObjectURL(dataBlob);
        // link.href = url;
        // expect(link.href).toEqual(url);

        // link.setAttribute('download', fileName + '.' + fileType);
        // expect(link.download).toEqual(fileName + '.' + fileType);


        // document.body.appendChild(link);
        // link.click();
        // expect(link.click).toHaveBeenCalled();


        // document.body.removeChild(link);
        // expect(document.body.getElementsByTagName('a')[1]).not.toBeDefined(fileName + '.' + fileType);
        Base64.toFile(xlsDataMock, 'xls', 'test');
        expect(document.body.getElementsByTagName('a')[1]).not.toBeDefined(fileName + '.' + fileType);
    });

    it('toFile PDF', () => {
        const fileName = 'test';
        const fileType = 'pdf';
        // let b64 = new Base64();
        // let properties: any = { type: 'application/pdf;base64, bindata' };
        // let _byteArray: any[] = [b64.base64ToArrayBuffer(pdfDataMock)];
        // let dataBlob: Blob = new Blob(_byteArray, properties);


        spyOn(Base64, 'toFile').withArgs(pdfDataMock, 'pdf', 'test').and.callThrough();


        // let link: HTMLAnchorElement = document.createElement('a');
        // spyOn(link, 'click').and.callThrough();

        // const url = window.URL.createObjectURL(dataBlob);
        // link.href = url;
        // expect(link.href).toEqual(url);

        // link.setAttribute('download', fileName + '.' + fileType);
        // expect(link.download).toEqual(fileName + '.' + fileType);


        // document.body.appendChild(link);
        // link.click();
        // expect(link.click).toHaveBeenCalled();


        // document.body.removeChild(link);
        // expect(document.body.getElementsByTagName('a')[1]).not.toBeDefined(fileName + '.' + fileType);
        Base64.toFile(pdfDataMock, 'pdf', 'test');
        expect(document.body.getElementsByTagName('a')[1]).not.toBeDefined(fileName + '.' + fileType);

    });
});
